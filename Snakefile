IDS, = glob_wildcards("{id}_R1.fastq.gz")


rule all:
  input:
    "tree.nwk",
    "results/",
    "heatmap_output.html"
    
# Cleaning up fastq files    
rule fastp:
	input:
		["{id}_R1.fastq.gz", "{id}_R2.fastq.gz"]
	output:
		["{id}_R1.fastp", "{id}_R2.fastp"]
	message:
		"Filtering fastQ files by trimming low quality reads using fastp"
	shell:
		"fastp -i {input[0]} -I {input[1]} -o {output[0]} -O {output[1]} -j fastp/{input}.json -h fastp/{input}.html"

# Vaiant call requires reference genome
rule snippy:
  input:
    ["{id}_R1.fastp", "{id}_R2.fastp"]
  params:
    ref = config['ref']
  output:
    directory("{id}/"),
    touch("{id}.snippy")
  message:
    "Calling variants using snippy"
  shell:
    "snippy --cpus 4 --ram 4 --force --outdir {output[0]} --ref {params.ref} --R1 {input[0]} --R2 {input[1]}"

# Alignment of whole/core genomes requires reference genome
rule snippy_core:
  input:
    expand("{id}.snippy", id=IDS)
  output:
    touch("core.aln"), touch("core.full.aln")
  message:
    "Aligning core and whole genomes into a multi fasta file"
  params:
    prefix="core", ref=config['ref']
  run:
    dirs=""
    for x in input:
      d=x.split(".")[0]
      dirs=dirs+d+" "
    shell("snippy-core --ref {params.ref} --prefix {params.prefix} "+dirs)
    
# Arranging files that were generated by snippy-core
rule move_files:
  input:
    rules.snippy_core.output
  output:
    directory("results/")
  message:
    "Sorting alignment files"
  run:
    shell("mv core* {output}")
    shell("rm fastq/*.snippy")

# Building phylogeny
rule tree:
  input:
    "core.aln"
  output:
    "tree.nwk"
  message:
    "Builing phylogeny tree of whole genomes using fastree"
  shell:
    "iqtree -bb 1000 -s results/{input} > {output}"

# Generating SNP Heatmap
rule vcf_viewer:
  input:
    "core.vcf"
  output:
    touch("heatmap_output.html")
  message:
    "Generating SNP heatmap"
  shell:
    "Rscript vcf2heatmap.R {input}"
