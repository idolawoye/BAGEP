IDS, = glob_wildcards("{id}_1.fastq.gz")
	
rule all:
	input:
		"core.aln.treefile",
		expand(["mykrobe_out/{id}.json"], id=IDS)

rule config:
	params:
		ref = "data/ref.gb"

config = rules.config.params

rule fastp:
	input:
		expand(["fastq/{id}_1.fastq.gz", "fastq/{id}_2.fastq.gz"],id=IDS)
	output:
		["fastp/{id}_1.fastp", "fastp/{id}_2.fastp"]
	message:
		"Filtering fastQ files by trimming low quality reads using fastp"
	shell:
		"fastp -i {input[0]} -I {input[1]} -o {output[0]} -O {output[1]} -j fastp/{input}.json -h fastp/{input}.html"

rule snippy:
	input:
		expand(["fastp/{id}_1.fastp", "fastp/{id}_2.fastp"],id=IDS),
		ref = config.ref
	output:
		touch("{id}.snippy")
	params:
		prefix = "{id}"
	message:
		"Calling variants in sequences using snippy"
	shell:
		"snippy --outdir {params.prefix} --ref {input.ref} --R1 {input[0]} --R2 {input[1]}"

rule mykrobe:
	input:
		expand(["fastp/{id}_1.fastp", "fastp/{id}_2.fastp"],id=IDS)
	output:
		"mykrobe_out/{id}.json"
	message:
		"Predicting antibiotic resistance using Mykrobe predictor"
	params:
		sample = "{id}"
	shell:
		"mykrobe predict {params.sample} tb --seq {input[0]} {input[1]} > {output}"

rule snippycore:
  input:
    expand("{id}.snippy",id=IDS)
  output:
   touch("core.aln")
  params:
    prefix="core"
  message:
    "Aligning variants into a multiple alignment file"
  run:
    dirs=""
    for x in input:
      d=x.split(".")[0]
      dirs=dirs+d+" "
    shell("snippy-core --prefix {params.prefix} "+dirs)

rule tree:
  input:
    "core.aln"
  output:
    "core.aln.treefile"
  message:
    "Constructing phylogeny tree using IQ-TREE..."
  shell:
    "iqtree -s {input}"
